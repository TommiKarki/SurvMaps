rgb(227,232,240, maxColorValue = 255))
bscale6 <- c(rgb(0,60,80, maxColorValue = 255),
rgb(39,117,142, maxColorValue = 255),
rgb(95,167,181, maxColorValue = 255),
rgb(147,199,207, maxColorValue = 255),
rgb(187,216,229, maxColorValue = 255),
rgb(227,232,240, maxColorValue = 255))
bscale7 <- c(rgb(0,60,80, maxColorValue = 255),
rgb(26,107,133, maxColorValue = 255),
rgb(73,153,171, maxColorValue = 255),
rgb(124,189,196, maxColorValue = 255),
rgb(165,206,215, maxColorValue = 255),
rgb(194,218,232, maxColorValue = 255),
rgb(227,232,240, maxColorValue = 255))
cols <- get(paste0("bscale", n))
}else if(col_scale=="red"){
# reds
rscale1 <- rgb(168,45,23, maxColorValue = 255)
rscale2 <- c(rgb(168,45,23, maxColorValue = 255),
rgb(225,167,68, maxColorValue = 255))
rscale3 <- c(rgb(168,45,23, maxColorValue = 255),
rgb(204,107,33, maxColorValue = 255),
rgb(233,184,85, maxColorValue = 255))
rscale4 <- c(rgb(168,45,23, maxColorValue = 255),
rgb(195,74,23, maxColorValue = 255),
rgb(220,150,53, maxColorValue = 255),
rgb(233,184,85, maxColorValue = 255))
rscale5 <- c(rgb(124,23,15, maxColorValue = 255),
rgb(182,61,23, maxColorValue = 255),
rgb(204,107,33, maxColorValue = 255),
rgb(225,167,68, maxColorValue = 255),
rgb(241,214,118, maxColorValue = 255))
rscale6 <- c(rgb(124,23,15, maxColorValue = 255),
rgb(174,52,23, maxColorValue = 255),
rgb(199,79,27, maxColorValue = 255),
rgb(214,133,43, maxColorValue = 255),
rgb(230,176,77, maxColorValue = 255),
rgb(241,214,118, maxColorValue = 255))
rscale7 <- c(rgb(124,23,15, maxColorValue = 255),
rgb(168,45,23, maxColorValue = 255),
rgb(195,74,23, maxColorValue = 255),
rgb(204,107,33, maxColorValue = 255),
rgb(220,150,53, maxColorValue = 255),
rgb(233,184,85, maxColorValue = 255),
rgb(241,214,118, maxColorValue = 255))
cols <- get(paste0("rscale", n))
}else if(col_scale=="grey"){
# greyscale
shades <- c("light",
"mediumlight",
"medium",
"mediumdark",
"dark")
cols <- c(rgb(229,229,229, maxColorValue = 255),
rgb(199,199,199, maxColorValue = 255),
rgb(128,128,128, maxColorValue = 255),
rgb(113,113,113, maxColorValue = 255),
rgb(63,63,63, maxColorValue = 255))
cols <- cols[shades%in%grey_shade]
if(is.null(n)){
message("Greyzone -  If you want one gray, please insert the grey_shade: 'light'-'medium'-'dark'")
}else if(!is.null(n) & length(cols)!=n){
message("Greyzone - number of colours (n) overridden by shades of grey. If you want
one gray, please insert the grey_shade: 'light'-'medium'-'dark'")
}
}else if(col_scale=="qualitative"){
# qualitative colours
cols <- c(rgb(101,179,46, maxColorValue = 255),
rgb(124,189,196, maxColorValue = 255),
rgb(192,210,54, maxColorValue = 255),
rgb(62,91,132, maxColorValue = 255),
rgb(0,140,117, maxColorValue = 255),
rgb(130,66,141, maxColorValue = 255),
rgb(232,104,63, maxColorValue = 255),
rgb(184,26,93, maxColorValue = 255))
cols <- cols[1:n]
}else{
stop("col_scale is not among the currently defined colour palettes, please select from 'green', 'blue', 'red', 'grey' or 'qualitative'")
}
return(cols)
}
SurvColors(col_scale = "grey")
SurvColors(col_scale = "grey", n=1)
SurvColors(col_scale = "grey", n=1, grey_shade = "medium")
remove.packages("SurvColors")
library(devtools)
install_github("TommiKarki/SurvColors")
rm(SurvColors())
rm(SurvColors)
library(SurvColors)
SurvColors("grey")
SurvColors("grey", grey_shade = 'light')
#' Colour palettes following the latest March 2018 surveillance guidelines
#'
#' @param col_scale Selected colour scale, defaults to 'green'. Select from 'green', 'blue', 'red', 'grey' or 'qualitative'
#' @param n Number of colours from each colour scale, apart from grey, in preferred order. Defaults to one colour, max 7-8 colours for each scale. To select
#' grey shades, use the argument grey_shade instead.
#' @param grey_shade Selected shade(s) of grey, use only for greyscale; overrides given number of colours (n).
#' @keywords colourscales
#' @export
#' @examples
#' # Select three first green colours
#' SurvColors("green", n=3)
#'
#' # Select two first qualitative colours
#' SurvColors("qualitative", n=2)
#'
#' SurvColors("grey", grey_shade = c("mediumlight", "dark"))
#'
#' # Use in a graph
#' # Dummy data
#' mydat <- data.frame(ID = c(seq(1,10,1)),
#' Gender = c(rep(c("F", "M"),5)))
#' require(ggplot2)
#' ggplot(mydat, aes(Gender)) + geom_bar(fill=SurvColors("qualitative", n=2))
SurvColors <- function(col_scale="green", n=NULL, grey_shade = c("light",
"mediumlight",
"medium",
"mediumdark",
"dark")){
if(is.null(n) & col_scale != "grey"){
n <- 1
# }else if(is.null(n) & col_scale == "grey"){
# n <- length(grey_shade)
}else{
n <- n
}
if(col_scale=="green"){
# greens
gscale1 <- rgb(101,179,46, maxColorValue = 255)
gscale2 <- c(rgb(32,119,50, maxColorValue = 255),
rgb(178,207,110, maxColorValue = 255))
gscale3 <- c(rgb(26,110,49, maxColorValue = 255),
rgb(101,179,46, maxColorValue = 255),
rgb(201,217,113, maxColorValue = 255))
gscale4 <- c(rgb(26,110,49, maxColorValue = 255),
rgb(40,147,55, maxColorValue = 255),
rgb(156,198,90, maxColorValue = 255),
rgb(201,217,113, maxColorValue = 255))
gscale5 <- c(rgb(12,72,40, maxColorValue = 255),
rgb(32,129,53, maxColorValue = 255),
rgb(101,179,46, maxColorValue = 255),
rgb(178,207,110, maxColorValue = 255),
rgb(231,231,185, maxColorValue = 255))
gscale6 <- c(rgb(12,72,40, maxColorValue = 255),
rgb(32,119,50, maxColorValue = 255),
rgb(66,158,53, maxColorValue = 255),
rgb(137,190,71, maxColorValue = 255),
rgb(192,212,122, maxColorValue = 255),
rgb(231,231,185, maxColorValue = 255))
gscale7 <- c(rgb(12,72,40, maxColorValue = 255),
rgb(26,110,49, maxColorValue = 255),
rgb(40,147,55, maxColorValue = 255),
rgb(101,179,46, maxColorValue = 255),
rgb(156,198,90, maxColorValue = 255),
rgb(201,217,113, maxColorValue = 255),
rgb(231,231,185, maxColorValue = 255))
cols <- get(paste0("gscale", n))
}else if(col_scale=="blue"){
# blues
bscale1 <- rgb(124,189,196, maxColorValue = 255)
bscale2 <- c(rgb(60,142,162, maxColorValue = 255),
rgb(173,210,221, maxColorValue = 255))
bscale3 <- c(rgb(26,107,133, maxColorValue = 255),
rgb(124,189,196, maxColorValue = 255),
rgb(194,218,232, maxColorValue = 255))
bscale4 <- c(rgb(26,107,133, maxColorValue = 255),
rgb(73,153,171, maxColorValue = 255),
rgb(165,206,215, maxColorValue = 255),
rgb(194,218,232, maxColorValue = 255))
bscale5 <- c(rgb(0,60,80, maxColorValue = 255),
rgb(60,142,162, maxColorValue = 255),
rgb(124,189,196, maxColorValue = 255),
rgb(173,210,221, maxColorValue = 255),
rgb(227,232,240, maxColorValue = 255))
bscale6 <- c(rgb(0,60,80, maxColorValue = 255),
rgb(39,117,142, maxColorValue = 255),
rgb(95,167,181, maxColorValue = 255),
rgb(147,199,207, maxColorValue = 255),
rgb(187,216,229, maxColorValue = 255),
rgb(227,232,240, maxColorValue = 255))
bscale7 <- c(rgb(0,60,80, maxColorValue = 255),
rgb(26,107,133, maxColorValue = 255),
rgb(73,153,171, maxColorValue = 255),
rgb(124,189,196, maxColorValue = 255),
rgb(165,206,215, maxColorValue = 255),
rgb(194,218,232, maxColorValue = 255),
rgb(227,232,240, maxColorValue = 255))
cols <- get(paste0("bscale", n))
}else if(col_scale=="red"){
# reds
rscale1 <- rgb(168,45,23, maxColorValue = 255)
rscale2 <- c(rgb(168,45,23, maxColorValue = 255),
rgb(225,167,68, maxColorValue = 255))
rscale3 <- c(rgb(168,45,23, maxColorValue = 255),
rgb(204,107,33, maxColorValue = 255),
rgb(233,184,85, maxColorValue = 255))
rscale4 <- c(rgb(168,45,23, maxColorValue = 255),
rgb(195,74,23, maxColorValue = 255),
rgb(220,150,53, maxColorValue = 255),
rgb(233,184,85, maxColorValue = 255))
rscale5 <- c(rgb(124,23,15, maxColorValue = 255),
rgb(182,61,23, maxColorValue = 255),
rgb(204,107,33, maxColorValue = 255),
rgb(225,167,68, maxColorValue = 255),
rgb(241,214,118, maxColorValue = 255))
rscale6 <- c(rgb(124,23,15, maxColorValue = 255),
rgb(174,52,23, maxColorValue = 255),
rgb(199,79,27, maxColorValue = 255),
rgb(214,133,43, maxColorValue = 255),
rgb(230,176,77, maxColorValue = 255),
rgb(241,214,118, maxColorValue = 255))
rscale7 <- c(rgb(124,23,15, maxColorValue = 255),
rgb(168,45,23, maxColorValue = 255),
rgb(195,74,23, maxColorValue = 255),
rgb(204,107,33, maxColorValue = 255),
rgb(220,150,53, maxColorValue = 255),
rgb(233,184,85, maxColorValue = 255),
rgb(241,214,118, maxColorValue = 255))
cols <- get(paste0("rscale", n))
}else if(col_scale=="grey"){
# greyscale
shades <- c("light",
"mediumlight",
"medium",
"mediumdark",
"dark")
cols <- c(rgb(229,229,229, maxColorValue = 255),
rgb(199,199,199, maxColorValue = 255),
rgb(128,128,128, maxColorValue = 255),
rgb(113,113,113, maxColorValue = 255),
rgb(63,63,63, maxColorValue = 255))
cols <- cols[shades%in%grey_shade]
if(is.null(n) & length(grey_shade)>1){
message("Greyzone -  If you want one gray, please insert the grey_shade: 'light'-'medium'-'dark'")
}else if(!is.null(n) & length(cols)!=n){
message("Greyzone - number of colours (n) overridden by shades of grey. If you want
one gray, please insert the grey_shade: 'light'-'medium'-'dark'")
}
}else if(col_scale=="qualitative"){
# qualitative colours
cols <- c(rgb(101,179,46, maxColorValue = 255),
rgb(124,189,196, maxColorValue = 255),
rgb(192,210,54, maxColorValue = 255),
rgb(62,91,132, maxColorValue = 255),
rgb(0,140,117, maxColorValue = 255),
rgb(130,66,141, maxColorValue = 255),
rgb(232,104,63, maxColorValue = 255),
rgb(184,26,93, maxColorValue = 255))
cols <- cols[1:n]
}else{
stop("col_scale is not among the currently defined colour palettes, please select from 'green', 'blue', 'red', 'grey' or 'qualitative'")
}
return(cols)
}
SurvColors("grey", grey_shade = 'light')
SurvColors("grey")
SurvColors("grey", grey_shade = "light")
SurvColors("grey", grey_shade = c("light", "dark"))
#' Colour palettes following the latest March 2018 surveillance guidelines
#'
#' @param col_scale Selected colour scale, defaults to 'green'. Select from 'green', 'blue', 'red', 'grey' or 'qualitative'
#' @param n Number of colours from each colour scale, apart from grey, in preferred order. Defaults to one colour, max 7-8 colours for each scale. To select
#' grey shades, use the argument grey_shade instead.
#' @param grey_shade Selected shade(s) of grey, use only for greyscale; overrides given number of colours (n).
#' @keywords colourscales
#' @export
#' @examples
#' # Select three first green colours
#' SurvColors("green", n=3)
#'
#' # Select two first qualitative colours
#' SurvColors("qualitative", n=2)
#'
#' SurvColors("grey", grey_shade = c("mediumlight", "dark"))
#'
#' # Use in a graph
#' # Dummy data
#' mydat <- data.frame(ID = c(seq(1,10,1)),
#' Gender = c(rep(c("F", "M"),5)))
#' require(ggplot2)
#' ggplot(mydat, aes(Gender)) + geom_bar(fill=SurvColors("qualitative", n=2))
SurvColors <- function(col_scale="green", n=NULL, grey_shade = c("light",
"mediumlight",
"medium",
"mediumdark",
"dark")){
if(is.null(n) & col_scale != "grey"){
n <- 1
# }else if(is.null(n) & col_scale == "grey"){
# n <- length(grey_shade)
}else{
n <- n
}
if(col_scale=="green"){
# greens
gscale1 <- rgb(101,179,46, maxColorValue = 255)
gscale2 <- c(rgb(32,119,50, maxColorValue = 255),
rgb(178,207,110, maxColorValue = 255))
gscale3 <- c(rgb(26,110,49, maxColorValue = 255),
rgb(101,179,46, maxColorValue = 255),
rgb(201,217,113, maxColorValue = 255))
gscale4 <- c(rgb(26,110,49, maxColorValue = 255),
rgb(40,147,55, maxColorValue = 255),
rgb(156,198,90, maxColorValue = 255),
rgb(201,217,113, maxColorValue = 255))
gscale5 <- c(rgb(12,72,40, maxColorValue = 255),
rgb(32,129,53, maxColorValue = 255),
rgb(101,179,46, maxColorValue = 255),
rgb(178,207,110, maxColorValue = 255),
rgb(231,231,185, maxColorValue = 255))
gscale6 <- c(rgb(12,72,40, maxColorValue = 255),
rgb(32,119,50, maxColorValue = 255),
rgb(66,158,53, maxColorValue = 255),
rgb(137,190,71, maxColorValue = 255),
rgb(192,212,122, maxColorValue = 255),
rgb(231,231,185, maxColorValue = 255))
gscale7 <- c(rgb(12,72,40, maxColorValue = 255),
rgb(26,110,49, maxColorValue = 255),
rgb(40,147,55, maxColorValue = 255),
rgb(101,179,46, maxColorValue = 255),
rgb(156,198,90, maxColorValue = 255),
rgb(201,217,113, maxColorValue = 255),
rgb(231,231,185, maxColorValue = 255))
cols <- get(paste0("gscale", n))
}else if(col_scale=="blue"){
# blues
bscale1 <- rgb(124,189,196, maxColorValue = 255)
bscale2 <- c(rgb(60,142,162, maxColorValue = 255),
rgb(173,210,221, maxColorValue = 255))
bscale3 <- c(rgb(26,107,133, maxColorValue = 255),
rgb(124,189,196, maxColorValue = 255),
rgb(194,218,232, maxColorValue = 255))
bscale4 <- c(rgb(26,107,133, maxColorValue = 255),
rgb(73,153,171, maxColorValue = 255),
rgb(165,206,215, maxColorValue = 255),
rgb(194,218,232, maxColorValue = 255))
bscale5 <- c(rgb(0,60,80, maxColorValue = 255),
rgb(60,142,162, maxColorValue = 255),
rgb(124,189,196, maxColorValue = 255),
rgb(173,210,221, maxColorValue = 255),
rgb(227,232,240, maxColorValue = 255))
bscale6 <- c(rgb(0,60,80, maxColorValue = 255),
rgb(39,117,142, maxColorValue = 255),
rgb(95,167,181, maxColorValue = 255),
rgb(147,199,207, maxColorValue = 255),
rgb(187,216,229, maxColorValue = 255),
rgb(227,232,240, maxColorValue = 255))
bscale7 <- c(rgb(0,60,80, maxColorValue = 255),
rgb(26,107,133, maxColorValue = 255),
rgb(73,153,171, maxColorValue = 255),
rgb(124,189,196, maxColorValue = 255),
rgb(165,206,215, maxColorValue = 255),
rgb(194,218,232, maxColorValue = 255),
rgb(227,232,240, maxColorValue = 255))
cols <- get(paste0("bscale", n))
}else if(col_scale=="red"){
# reds
rscale1 <- rgb(168,45,23, maxColorValue = 255)
rscale2 <- c(rgb(168,45,23, maxColorValue = 255),
rgb(225,167,68, maxColorValue = 255))
rscale3 <- c(rgb(168,45,23, maxColorValue = 255),
rgb(204,107,33, maxColorValue = 255),
rgb(233,184,85, maxColorValue = 255))
rscale4 <- c(rgb(168,45,23, maxColorValue = 255),
rgb(195,74,23, maxColorValue = 255),
rgb(220,150,53, maxColorValue = 255),
rgb(233,184,85, maxColorValue = 255))
rscale5 <- c(rgb(124,23,15, maxColorValue = 255),
rgb(182,61,23, maxColorValue = 255),
rgb(204,107,33, maxColorValue = 255),
rgb(225,167,68, maxColorValue = 255),
rgb(241,214,118, maxColorValue = 255))
rscale6 <- c(rgb(124,23,15, maxColorValue = 255),
rgb(174,52,23, maxColorValue = 255),
rgb(199,79,27, maxColorValue = 255),
rgb(214,133,43, maxColorValue = 255),
rgb(230,176,77, maxColorValue = 255),
rgb(241,214,118, maxColorValue = 255))
rscale7 <- c(rgb(124,23,15, maxColorValue = 255),
rgb(168,45,23, maxColorValue = 255),
rgb(195,74,23, maxColorValue = 255),
rgb(204,107,33, maxColorValue = 255),
rgb(220,150,53, maxColorValue = 255),
rgb(233,184,85, maxColorValue = 255),
rgb(241,214,118, maxColorValue = 255))
cols <- get(paste0("rscale", n))
}else if(col_scale=="grey"){
# greyscale
shades <- c("light",
"mediumlight",
"medium",
"mediumdark",
"dark")
cols <- c(rgb(229,229,229, maxColorValue = 255),
rgb(199,199,199, maxColorValue = 255),
rgb(128,128,128, maxColorValue = 255),
rgb(113,113,113, maxColorValue = 255),
rgb(63,63,63, maxColorValue = 255))
cols <- cols[shades%in%grey_shade]
if(is.null(n) & length(grey_shade)>1){
message("Greyzone -  If you want one gray, please insert the grey_shade: 'light'-'medium'-'dark'")
}else if(!is.null(n)){
message("Greyzone - number of colours (n) overridden by shades of grey. If you want
one gray, please insert the grey_shade: 'light'-'medium'-'dark'")
}
}else if(col_scale=="qualitative"){
# qualitative colours
cols <- c(rgb(101,179,46, maxColorValue = 255),
rgb(124,189,196, maxColorValue = 255),
rgb(192,210,54, maxColorValue = 255),
rgb(62,91,132, maxColorValue = 255),
rgb(0,140,117, maxColorValue = 255),
rgb(130,66,141, maxColorValue = 255),
rgb(232,104,63, maxColorValue = 255),
rgb(184,26,93, maxColorValue = 255))
cols <- cols[1:n]
}else{
stop("col_scale is not among the currently defined colour palettes, please select from 'green', 'blue', 'red', 'grey' or 'qualitative'")
}
return(cols)
}
SurvColors("grey", grey_shade = c("light", "dark"))
SurvColors("grey", grey_shade = c("light", "dark"), n=5)
SurvColors("grey")
SurvColors("grey", n=4)
remove.packages("SurvColors")
rm(SurvColors)
install_github("TommiKarki/SurvColors")
library(SurvColors)
SurvColors("grey", n=4)
SurvColors("grey")
SurvColors("grey", grey_shade = 'medium')
SurvColors("grey", grey_shade = 'mediumdark')
SurvColors("grey", grey_shade = 'mediumdark', 'dark')
SurvColors("grey", grey_shade = c('mediumdark', 'dark'))
SurvColors("grey")
SurvColors("grey", grey_shade = "dark")
SurvColors("grey", grey_shade = c("dark", "light"))
SurvColors("grey", grey_shade = c("mediumlight", "dark"))
SurvColors("grey", grey_shade = c("mediumlight", "light"))
SurvColors("green")
SurvColors("green", n=6)
SurvColors("green", n=7)
SurvColors("green", n=8)
SurvColors("green", n=7)
SurvColors("green", n=4)
SurvColors("qualitative", n=4)
SurvColors("qualitative", n=8)
SurvColors("qualitative", n=9)
SurvColors("qualitative", n=100)
library(grid)
library(ggplot2)
library(ggthemes)
library(sp)
library(broom)
library(SurvColors) # Internal package to use new guideline colours, see GitHub
library(SurvMaps)
?SurvMapper
# load the included dummy data
load(system.file("extdata", "dummy_data.rds", package = "SurvMaps"))
# load the included EU/EEA SpatialPolygonsDataframe (includes Asia and Africa for background)
load(system.file("extdata", "EU_AFR_AS_plgs.rds", package = "SurvMaps"))
# Prepare the data for SurvMapper with PrepMap
mymap <- PrepMap(data = dummy_data , geo = plg_map)
# The map is correctly aligned only for selected width/height, so you can plot into a predefined device
dev.new(width=11.8,height=8, noRStudioGD = TRUE)
# Simple chloropleth map
SurvMapper(mymap, fills ="Dummy_status", Legend_titles = "Testing this", col_scale = "red")
# Chloropleth map with some additional options
SurvMapper(mymap, fills ="Dummy_status", Legend_titles = "Testing this",
fill_levels = c("Optimal",
"Good",
"Poor",
"Very poor",
"No data"),
col_scale = "red", reverse_colours = TRUE)
remove.packages("SurvMaps")
install("C:/ado/SurvMaps")
library(devtools)
install("C:/ado/SurvMaps")
# load the included dummy data
load(system.file("extdata", "dummy_data.rds", package = "SurvMaps"))
# load the included EU/EEA SpatialPolygonsDataframe (includes Asia and Africa for background)
load(system.file("extdata", "EU_AFR_AS_plgs.rds", package = "SurvMaps"))
# Prepare the data for SurvMapper with PrepMap
mymap <- PrepMap(data = dummy_data , geo = plg_map)
# The map is correctly aligned only for selected width/height, so you can plot into a predefined device
dev.new(width=11.8,height=8, noRStudioGD = TRUE)
# Simple chloropleth map
SurvMapper(mymap, fills ="Dummy_status", Legend_titles = "Testing this", col_scale = "red")
dummy_data <- data
setwd("C:/ado/SurvMaps/inst/extdata/dummy_data.rds")
setwd("C:/ado/SurvMaps/inst/extdata")
save(dummy_data, file = "dummy_data.rds")
remove.packages("SurvMaps")
install("C:/ado/SurvMaps")
# load the included dummy data
load(system.file("extdata", "dummy_data.rds", package = "SurvMaps"))
# load the included EU/EEA SpatialPolygonsDataframe (includes Asia and Africa for background)
load(system.file("extdata", "EU_AFR_AS_plgs.rds", package = "SurvMaps"))
# Prepare the data for SurvMapper with PrepMap
mymap <- PrepMap(data = dummy_data , geo = plg_map)
# The map is correctly aligned only for selected width/height, so you can plot into a predefined device
dev.new(width=11.8,height=8, noRStudioGD = TRUE)
# Simple chloropleth map
SurvMapper(mymap, fills ="Dummy_status", Legend_titles = "Testing this", col_scale = "red")
setwd("C:/ado/SurvMaps")
document()
document()
remove.packages("SurvMaps")
install("C:/ado/SurvMaps")
